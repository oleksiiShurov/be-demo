export declare class UUID {
    /**
     * Check if the given test string is a valid uuid string.
     * https://stackoverflow.com/questions/7905929/how-to-test-valid-uuid-UUID/13653180#13653180
     * @param {string} uuidTestString
     * @returns {boolean} True if it is a valid uuid string, otherwise false.
     */
    static isValidUUID(uuidTestString: string): boolean;
    /**
     * Check if the given test string is a valid uuid dash free string.
     *
     * @param {string} uuidTestString
     * @returns {boolean} True if it is a valid dash free uuid string, otherwise false.
     */
    static isValidDashFreeUUID(uuidTestString: string): boolean;
    /**
     * Get a dash free UUID.
     * @param {UUID} uuid
     * @returns {string} A dash free UUID.
     */
    static getDashFreeUUID(uuid: UUID): string;
    /**
     * Get UUID which contains the dashes.
     * @param {string} dashFreeUuid - A dash free UUID.
     * @returns {UUID} A dash containing UUID.
     * @throws {UUIDError}
     */
    static getDashContainedUUID(dashFreeUuid: string): UUID;
    /**
     * Creates a UUID string.
     * @returns {string} A UUID string.
     */
    static createUUID(): string;
    private str;
    /**
     * Constructs a new UUID from the given parameter, if it is a valid UUID string.
     * If no parameter is passed, an UUID will be generated.
     * @param {string} [str]
     * @throws {UUIDError}
     */
    constructor(str?: string);
    /**
     * Checks if the given UUID string or class is equal to this UUID.
     * @param {string|UUID} uuid
     * @returns {boolean}
     * @public
     */
    equals(uuid: string | UUID): boolean;
    /**
     * @see @link {UUID.getDashFreeUUID}
     * @public
     */
    getDashFreeUUID(): string;
    /**
     * Get the UUID in string representation.
     * @returns {string} UUID as string.
     * @public
     */
    toString(): string;
}
