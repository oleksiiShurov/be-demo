{"version":3,"file":"TestRail.node.js","sources":["../src/TestRailException.ts","../src/TestRail.ts","../src/query-string.ts"],"sourcesContent":["export class TestRailException extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TestRailException';\n  }\n}\n","import { Request, Response } from './payload';\nimport { stringify as qs } from './query-string';\nimport { TestRailException } from './TestRailException';\n\nexport * from './payload';\nexport type { Request as Payload, Response as Model };\n\nclass TestRail {\n  static Exception = TestRailException;\n  private readonly username?: string;\n  private readonly password?: string;\n  private readonly baseURL: string;\n\n  constructor(config?: { host: string; username: string; password: string }) {\n    // @ts-ignore - Backward compatibility\n    this.username = config?.username || config?.user;\n    this.password = config?.password;\n    this.baseURL = (config?.host || '') + '/index.php?/api/v2/';\n  }\n\n  // Attachments\n\n  addAttachmentToCase(caseId: number, payload: Request.AddAttachment): Promise<Response.CreatedAttachment> {\n    return this._api('POST', `add_attachment_to_case/${caseId}`, { form: { attachment: payload } });\n  }\n\n  addAttachmentToPlan(planId: number, payload: Request.AddAttachment): Promise<Response.CreatedAttachment> {\n    return this._api('POST', `add_attachment_to_plan/${planId}`, { form: { attachment: payload } });\n  }\n\n  addAttachmentToPlanEntry(planId: number, entryId: string, payload: Request.AddAttachment): Promise<Response.CreatedAttachment> {\n    return this._api('POST', `add_attachment_to_plan_entry/${planId}/${entryId}`, { form: { attachment: payload } });\n  }\n\n  addAttachmentToResult(resultId: number, payload: Request.AddAttachment): Promise<Response.CreatedAttachment> {\n    return this._api('POST', `add_attachment_to_result/${resultId}`, { form: { attachment: payload } });\n  }\n\n  addAttachmentToRun(runId: number, payload: Request.AddAttachment): Promise<Response.CreatedAttachment> {\n    return this._api('POST', `add_attachment_to_run/${runId}`, { form: { attachment: payload } });\n  }\n\n  getAttachmentsForCase(caseId: number, filters?: Request.Pagination): Promise<Response.AttachmentForCase[]> {\n    return pagination('attachments', filters, (filters) => {\n      return this._api('GET', `get_attachments_for_case/${caseId}`, { query: filters });\n    });\n  }\n\n  getAttachmentsForPlan(planId: number, filters?: Request.Pagination): Promise<Response.AttachmentForPlan[]> {\n    return pagination('attachments', filters, (filters) => {\n      return this._api('GET', `get_attachments_for_plan/${planId}`, { query: filters });\n    });\n  }\n\n  getAttachmentsForPlanEntry(planId: number, entryId: string): Promise<Response.AttachmentForPlanEntry[]> {\n    return this._api('GET', `get_attachments_for_plan_entry/${planId}/${entryId}`);\n  }\n\n  getAttachmentsForRun(runId: number, filters?: Request.Pagination): Promise<Response.AttachmentForRun[]> {\n    return pagination('attachments', filters, (filters) => {\n      return this._api('GET', `get_attachments_for_run/${runId}`, { query: filters });\n    });\n  }\n\n  getAttachmentsForTest(testId: number): Promise<Response.AttachmentForTest[]> {\n    return this._api('GET', `get_attachments_for_test/${testId}`);\n  }\n\n  getAttachment(attachmentId: string): Promise<Blob> {\n    return this._api('GET', `get_attachment/${attachmentId}`);\n  }\n\n  deleteAttachment(attachmentId: string): Promise<void> {\n    return this._api('POST', `delete_attachment/${attachmentId}`);\n  }\n\n  // Cases\n\n  getCase(caseId: number): Promise<Response.Case> {\n    return this._api('GET', `get_case/${caseId}`);\n  }\n\n  getCases(projectId: number, filters?: Request.CaseFilters): Promise<Response.Case[]> {\n    return pagination('cases', filters, (filters) => {\n      return this._api('GET', `get_cases/${projectId}`, { query: filters });\n    });\n  }\n\n  getHistoryForCase(caseId: number, filters?: Request.Pagination): Promise<Response.CaseHistory[]> {\n    return pagination('history', filters, (filters) => {\n      return this._api('GET', `get_history_for_case/${caseId}`, { query: filters });\n    });\n  }\n\n  addCase(sectionId: number, payload: Request.AddCase): Promise<Response.Case> {\n    return this._api('POST', `add_case/${sectionId}`, { json: payload });\n  }\n\n  copyCasesToSection(sectionId: number, payload: Request.CopyCasesToSection): Promise<void> {\n    return this._api('POST', `copy_cases_to_section/${sectionId}`, { json: payload });\n  }\n\n  updateCase(caseId: number, payload: Request.UpdateCase): Promise<Response.Case> {\n    return this._api('POST', `update_case/${caseId}`, { json: payload });\n  }\n\n  updateCases(suiteId: number, payload: Request.UpdateCases): Promise<void> {\n    return this._api('POST', `update_cases/${suiteId}`, { json: payload });\n  }\n\n  moveCasesToSection(sectionId: number, payload: Request.MoveCasesToSection): Promise<void> {\n    return this._api('POST', `move_cases_to_section/${sectionId}`, { json: payload });\n  }\n\n  deleteCase(caseId: number): Promise<void> {\n    return this._api('POST', `delete_case/${caseId}`);\n  }\n\n  deleteCases(suiteId: number, payload: Request.DeleteCases): Promise<void> {\n    return this._api('POST', `delete_cases/${suiteId}`, { json: payload });\n  }\n\n  // Case Fields\n\n  getCaseFields(): Promise<Response.CaseField[]> {\n    return this._api('GET', 'get_case_fields');\n  }\n\n  addCaseField(payload: Request.AddCaseField): Promise<Response.CaseField> {\n    return this._api('POST', 'add_case_field', { json: payload });\n  }\n\n  // Case Types\n\n  getCaseTypes(): Promise<Response.CaseType[]> {\n    return this._api('GET', 'get_case_types');\n  }\n\n  // Configurations\n\n  getConfigs(projectId: number): Promise<Response.Config[]> {\n    return this._api('GET', `get_configs/${projectId}`);\n  }\n\n  addConfigGroup(projectId: number, payload: Request.AddConfigGroup): Promise<Response.Config> {\n    return this._api('POST', `add_config_group/${projectId}`, { json: payload });\n  }\n\n  addConfig(configGroupId: number, payload: Request.AddConfig): Promise<Response.ConfigItem> {\n    return this._api('POST', `add_config/${configGroupId}`, { json: payload });\n  }\n\n  updateConfigGroup(configGroupId: number, payload: Request.UpdateConfigGroup): Promise<Response.Config> {\n    return this._api('POST', `update_config_group/${configGroupId}`, { json: payload });\n  }\n\n  updateConfig(configId: number, payload: Request.UpdateConfig): Promise<Response.ConfigItem> {\n    return this._api('POST', `update_config/${configId}`, { json: payload });\n  }\n\n  deleteConfigGroup(configGroupId: number): Promise<void> {\n    return this._api('POST', `delete_config_group/${configGroupId}`);\n  }\n\n  deleteConfig(configId: number): Promise<void> {\n    return this._api('POST', `delete_config/${configId}`);\n  }\n\n  // Milestones\n\n  getMilestone(milestoneId: number): Promise<Response.Milestone> {\n    return this._api('GET', `get_milestone/${milestoneId}`);\n  }\n\n  getMilestones(projectId: number, filters?: Request.MilestoneFilters): Promise<Response.Milestone[]> {\n    return pagination('milestones', filters, (filters) => {\n      return this._api('GET', `get_milestones/${projectId}`, { query: filters });\n    });\n  }\n\n  addMilestone(projectId: number, payload: Request.AddMilestone): Promise<Response.Milestone> {\n    return this._api('POST', `add_milestone/${projectId}`, { json: payload });\n  }\n\n  updateMilestone(milestoneId: number, payload: Request.UpdateMilestone): Promise<Response.Milestone> {\n    return this._api('POST', `update_milestone/${milestoneId}`, { json: payload });\n  }\n\n  deleteMilestone(milestoneId: number): Promise<void> {\n    return this._api('POST', `delete_milestone/${milestoneId}`);\n  }\n\n  // Plans\n\n  getPlan(planId: number): Promise<Response.Plan> {\n    return this._api('GET', `get_plan/${planId}`);\n  }\n\n  getPlans(projectId: number, filters?: Request.PlanFilters): Promise<Response.PlanItem[]> {\n    return pagination('plans', filters, (filters) => {\n      return this._api('GET', `get_plans/${projectId}`, { query: filters });\n    });\n  }\n\n  addPlan(projectId: number, payload: Request.AddPlan): Promise<Response.Plan> {\n    return this._api('POST', `add_plan/${projectId}`, { json: payload });\n  }\n\n  addPlanEntry(planId: number, payload: Request.AddPlanEntry): Promise<Response.PlanEntry> {\n    return this._api('POST', `add_plan_entry/${planId}`, { json: payload });\n  }\n\n  addRunToPlanEntry(planId: number, entryId: string, payload: Request.AddRunToPlanEntry): Promise<Response.PlanEntry> {\n    return this._api('POST', `add_run_to_plan_entry/${planId}/${entryId}`, { json: payload });\n  }\n\n  updatePlan(planId: number, payload: Request.UpdatePlan): Promise<Response.Plan> {\n    return this._api('POST', `update_plan/${planId}`, { json: payload });\n  }\n\n  updatePlanEntry(planId: number, entryId: string, payload: Request.UpdatePlanEntry): Promise<Response.PlanEntry> {\n    return this._api('POST', `update_plan_entry/${planId}/${entryId}`, { json: payload });\n  }\n\n  updateRunInPlanEntry(runId: number, payload: Request.UpdateRunInPlanEntry): Promise<Response.PlanEntry> {\n    return this._api('POST', `update_run_in_plan_entry/${runId}`, { json: payload });\n  }\n\n  closePlan(planId: number): Promise<Response.Plan> {\n    return this._api('POST', `close_plan/${planId}`);\n  }\n\n  deletePlan(planId: number): Promise<void> {\n    return this._api('POST', `delete_plan/${planId}`);\n  }\n\n  deletePlanEntry(planId: number, entryId: string): Promise<void> {\n    return this._api('POST', `delete_plan_entry/${planId}/${entryId}`);\n  }\n\n  deleteRunFromPlanEntry(runId: number): Promise<void> {\n    return this._api('POST', `delete_run_from_plan_entry/${runId}`);\n  }\n\n  // Priorities\n\n  getPriorities(): Promise<Response.Priority[]> {\n    return this._api('GET', 'get_priorities');\n  }\n\n  // Projects\n\n  getProject(projectId: number): Promise<Response.Project> {\n    return this._api('GET', `get_project/${projectId}`);\n  }\n\n  getProjects(filters?: Request.ProjectFilters): Promise<Response.Project[]> {\n    return pagination('projects', filters, (filters) => {\n      return this._api('GET', 'get_projects', { query: filters });\n    });\n  }\n\n  addProject(payload: Request.AddProject): Promise<Response.Project> {\n    return this._api('POST', 'add_project', { json: payload });\n  }\n\n  updateProject(projectId: number, payload: Request.UpdateProject): Promise<Response.Project> {\n    return this._api('POST', `update_project/${projectId}`, { json: payload });\n  }\n\n  deleteProject(projectId: number): Promise<void> {\n    return this._api('POST', `delete_project/${projectId}`);\n  }\n\n  // Reports\n\n  getReports(projectId: number): Promise<Response.Report[]> {\n    return this._api('GET', `get_reports/${projectId}`);\n  }\n\n  runReport(reportTemplateId: number): Promise<Response.ReportUrls> {\n    return this._api('POST', `run_report/${reportTemplateId}`);\n  }\n\n  // Results\n\n  getResults(testId: number, filters?: Request.ResultFilters): Promise<Response.Result[]> {\n    return pagination('results', filters, (filters) => {\n      return this._api('GET', `get_results/${testId}`, { query: filters });\n    });\n  }\n\n  getResultsForCase(runId: number, caseId: number, filters?: Request.ResultFilters): Promise<Response.Result[]> {\n    return pagination('results', filters, (filters) => {\n      return this._api('GET', `get_results_for_case/${runId}/${caseId}`, { query: filters });\n    });\n  }\n\n  getResultsForRun(runId: number, filters?: Request.ResultForRunFilters): Promise<Response.Result[]> {\n    return pagination('results', filters, (filters) => {\n      return this._api('GET', `get_results_for_run/${runId}`, { query: filters });\n    });\n  }\n\n  addResult(testId: number, payload: Request.AddResult): Promise<Response.Result> {\n    return this._api('POST', `add_result/${testId}`, { json: payload });\n  }\n\n  addResultForCase(runId: number, caseId: number, payload: Request.AddResult): Promise<Response.Result> {\n    return this._api('POST', `add_result_for_case/${runId}/${caseId}`, { json: payload });\n  }\n\n  addResults(runId: number, payload: Request.AddResults): Promise<Response.Result[]> {\n    return this._api('POST', `add_results/${runId}`, { json: payload });\n  }\n\n  addResultsForCases(runId: number, payload: Request.AddResultsForCases): Promise<Response.Result[]> {\n    return this._api('POST', `add_results_for_cases/${runId}`, { json: payload });\n  }\n\n  // Result Fields\n\n  getResultFields(): Promise<Response.ResultField[]> {\n    return this._api('GET', 'get_result_fields');\n  }\n\n  // Runs\n\n  getRun(runId: number): Promise<Response.Run> {\n    return this._api('GET', `get_run/${runId}`);\n  }\n\n  getRuns(projectId: number, filters?: Request.RunFilters): Promise<Response.Run[]> {\n    return pagination('runs', filters, (filters) => {\n      return this._api('GET', `get_runs/${projectId}`, { query: filters });\n    });\n  }\n\n  addRun(projectId: number, payload: Request.AddRun): Promise<Response.Run> {\n    return this._api('POST', `add_run/${projectId}`, { json: payload });\n  }\n\n  updateRun(runId: number, payload: Request.UpdateRun): Promise<Response.Run> {\n    return this._api('POST', `update_run/${runId}`, { json: payload });\n  }\n\n  closeRun(runId: number): Promise<Response.Run> {\n    return this._api('POST', `close_run/${runId}`);\n  }\n\n  deleteRun(runId: number): Promise<void> {\n    return this._api('POST', `delete_run/${runId}`);\n  }\n\n  // Sections\n\n  getSection(sectionId: number): Promise<Response.Section> {\n    return this._api('GET', `get_section/${sectionId}`);\n  }\n\n  getSections(projectId: number, filters?: Request.SectionFilters): Promise<Response.Section[]> {\n    return pagination('sections', filters, (filters) => {\n      return this._api('GET', `get_sections/${projectId}`, { query: filters });\n    });\n  }\n\n  addSection(projectId: number, payload: Request.AddSection): Promise<Response.Section> {\n    return this._api('POST', `add_section/${projectId}`, { json: payload });\n  }\n\n  moveSection(sectionId: number, payload: Request.MoveSection): Promise<Response.Section> {\n    return this._api('POST', `move_section/${sectionId}`, { json: payload });\n  }\n\n  updateSection(sectionId: number, payload: Request.UpdateSection): Promise<Response.Section> {\n    return this._api('POST', `update_section/${sectionId}`, { json: payload });\n  }\n\n  deleteSection(sectionId: number): Promise<void> {\n    return this._api('POST', `delete_section/${sectionId}`);\n  }\n\n  // Shared steps\n\n  getSharedStep(stepId: number): Promise<Response.SharedStep> {\n    return this._api('GET', `get_shared_step/${stepId}`);\n  }\n\n  getSharedSteps(projectId: number, filters?: Request.SharedStepFilters): Promise<Response.SharedStep[]> {\n    return pagination('shared_steps', filters, (filters) => {\n      return this._api('GET', `get_shared_steps/${projectId}`, { query: filters });\n    });\n  }\n\n  addSharedStep(projectId: number, payload: Request.AddSharedStep): Promise<Response.SharedStep> {\n    return this._api('POST', `add_shared_step/${projectId}`, { json: payload });\n  }\n\n  updateSharedStep(stepId: number, payload: Request.UpdateSharedStep): Promise<Response.SharedStep> {\n    return this._api('POST', `update_shared_step/${stepId}`, { json: payload });\n  }\n\n  deleteSharedStep(stepId: number, payload?: Request.DeleteSharedStep): Promise<void> {\n    return this._api('POST', `delete_shared_step/${stepId}`, { json: payload });\n  }\n\n  // Statuses\n\n  getStatuses(): Promise<Response.Status[]> {\n    return this._api('GET', 'get_statuses');\n  }\n\n  // Suites\n\n  getSuite(suiteId: number): Promise<Response.Suite> {\n    return this._api('GET', `get_suite/${suiteId}`);\n  }\n\n  getSuites(projectId: number): Promise<Response.Suite[]> {\n    return this._api('GET', `get_suites/${projectId}`);\n  }\n\n  addSuite(projectId: number, payload: Request.AddSuite): Promise<Response.Suite> {\n    return this._api('POST', `add_suite/${projectId}`, { json: payload });\n  }\n\n  updateSuite(suiteId: number, payload: Request.UpdateSuite): Promise<Response.Suite> {\n    return this._api('POST', `update_suite/${suiteId}`, { json: payload });\n  }\n\n  deleteSuite(suiteId: number): Promise<void> {\n    return this._api('POST', `delete_suite/${suiteId}`);\n  }\n\n  // Templates\n\n  getTemplates(projectId: number): Promise<Response.Template[]> {\n    return this._api('GET', `get_templates/${projectId}`);\n  }\n\n  // Tests\n\n  getTest(testId: number): Promise<Response.Test> {\n    return this._api('GET', `get_test/${testId}`);\n  }\n\n  getTests(runId: number, filters?: Request.TestFilters): Promise<Response.Test[]> {\n    return pagination('tests', filters, (filters) => {\n      return this._api('GET', `get_tests/${runId}`, { query: filters });\n    });\n  }\n\n  // Users\n\n  getUser(userId: number): Promise<Response.User> {\n    return this._api('GET', `get_user/${userId}`);\n  }\n\n  getCurrentUser(): Promise<Response.User> {\n    return this._api('GET', `get_current_user`);\n  }\n\n  getUserByEmail(email: string): Promise<Response.User> {\n    return this._api('GET', 'get_user_by_email', { query: { email } });\n  }\n\n  getUsers(filters?: Request.UserFilters): Promise<Response.User[]> {\n    return this._api('GET', 'get_users', { query: filters });\n  }\n\n  // Internal\n\n  private async _api<T>(method: string, path: string, { query, json, form }: { query?: object; json?: object; form?: object } = {}): Promise<T> {\n    const headers: any = {};\n    const url = this.baseURL + path + qs(query);\n\n    // Add authentication header\n    if (this.username && this.password) {\n      headers.Authorization = `Basic ${base64(`${this.username}:${this.password}`)}`;\n    }\n\n    // TestRail requires 'Content-Type: application/json' for all requests except those containing form data\n    if (!form) {\n      headers['Content-Type'] = 'application/json';\n    }\n\n    // Determine body & request type\n    let body;\n\n    if (json) {\n      body = JSON.stringify(json);\n    } else if (form) {\n      body = new FormData();\n      for (const [key, value] of Object.entries(form)) {\n        if (value.name && value.value) {\n          appendToFormData(body, key, value.value, value.name);\n        } else {\n          appendToFormData(body, key, value);\n        }\n      }\n    }\n\n    while (true) {\n      const response = await fetch(url, { method, body, headers });\n\n      // Retry on 429 Too Many Requests\n      if (response.status === 429) {\n        const retryAfter = parseInt(response.headers.get('Retry-After') || '1') * 1000;\n        await sleep(retryAfter);\n        continue;\n      }\n\n      // Retry on 409 Conflict - Daily Maintenance\n      if (response.status === 409) {\n        await sleep(10 * 1000);\n        continue;\n      }\n\n      // Content-Type based response\n      const result = response.headers.get('Content-Type')?.includes('json')\n        ? await response.json().catch(() => ({}))\n        : await response.blob();\n\n      if (response.ok) {\n        return result;\n      } else {\n        throw new TestRail.Exception(result.error || 'No additional error message received');\n      }\n    }\n  }\n}\n\nasync function pagination<T>(key: string, filters: any, callback: (filters: any) => any): Promise<T[]> {\n  if (filters && (filters.hasOwnProperty('limit') || filters.hasOwnProperty('offset'))) {\n    const result = await callback(filters);\n\n    return Array.isArray(result)\n      ? result\n      : result[key] || [];\n  }\n\n  let page = 0;\n  let offset = 0;\n  const limit = 250;\n  const results = [];\n  const ids = new Set();\n\n  while (true) {\n    offset = page++ * limit;\n\n    let items = await pagination<T>(key, { ...filters, limit, offset }, callback);\n    items = items.filter((item: any) => (ids.has(item.id) ? false : ids.add(item.id)));\n\n    results.push(...items);\n\n    if (items.length != limit) {\n      break;\n    }\n  }\n\n  return results;\n}\n\nfunction appendToFormData(formData: FormData, name: string, value: string | Blob, filename?: string) {\n  // Browser requires the second parameter to be a Blob\n  if (filename && typeof Blob !== 'undefined') {\n    const blob = value instanceof Blob ? value : new Blob([value]);\n    formData.append(name, blob, filename);\n  } else {\n    formData.append(name, value, filename);\n  }\n}\n\nfunction base64(string: string) {\n  if (typeof btoa !== 'undefined') {\n    return btoa(string);\n  } else {\n    return Buffer.from(string).toString('base64');\n  }\n}\n\nfunction sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, timeout));\n}\n\nexport default TestRail;\n","export function stringify(object?: Record<string, any>): string {\n  if (!object) {\n    return '';\n  }\n\n  let qs = '';\n\n  for (const [key, value] of Object.entries(object)) {\n    let newValue = value;\n\n    if (typeof value === 'boolean') {\n      newValue = +value;\n    } else if (Array.isArray(value)) {\n      newValue = value.join(',');\n    }\n\n    qs += `&${key}=${encodeURIComponent(newValue)}`;\n  }\n\n  return qs;\n}\n"],"names":["TestRailException","Error","constructor","message","super","this","name","TestRail","config","username","user","password","baseURL","host","addAttachmentToCase","caseId","payload","_api","form","attachment","addAttachmentToPlan","planId","addAttachmentToPlanEntry","entryId","addAttachmentToResult","resultId","addAttachmentToRun","runId","getAttachmentsForCase","filters","pagination","query","getAttachmentsForPlan","getAttachmentsForPlanEntry","getAttachmentsForRun","getAttachmentsForTest","testId","getAttachment","attachmentId","deleteAttachment","getCase","getCases","projectId","getHistoryForCase","addCase","sectionId","json","copyCasesToSection","updateCase","updateCases","suiteId","moveCasesToSection","deleteCase","deleteCases","getCaseFields","addCaseField","getCaseTypes","getConfigs","addConfigGroup","addConfig","configGroupId","updateConfigGroup","updateConfig","configId","deleteConfigGroup","deleteConfig","getMilestone","milestoneId","getMilestones","addMilestone","updateMilestone","deleteMilestone","getPlan","getPlans","addPlan","addPlanEntry","addRunToPlanEntry","updatePlan","updatePlanEntry","updateRunInPlanEntry","closePlan","deletePlan","deletePlanEntry","deleteRunFromPlanEntry","getPriorities","getProject","getProjects","addProject","updateProject","deleteProject","getReports","runReport","reportTemplateId","getResults","getResultsForCase","getResultsForRun","addResult","addResultForCase","addResults","addResultsForCases","getResultFields","getRun","getRuns","addRun","updateRun","closeRun","deleteRun","getSection","getSections","addSection","moveSection","updateSection","deleteSection","getSharedStep","stepId","getSharedSteps","addSharedStep","updateSharedStep","deleteSharedStep","getStatuses","getSuite","getSuites","addSuite","updateSuite","deleteSuite","getTemplates","getTest","getTests","getUser","userId","getCurrentUser","getUserByEmail","email","getUsers","async","method","path","headers","url","object","qs","key","value","Object","entries","newValue","Array","isArray","join","encodeURIComponent","string","body","Authorization","btoa","Buffer","from","toString","JSON","stringify","FormData","appendToFormData","response","fetch","status","retryAfter","parseInt","get","sleep","result","includes","catch","blob","ok","Exception","error","callback","hasOwnProperty","page","offset","results","ids","Set","items","limit","filter","item","has","id","add","push","length","formData","filename","Blob","append","timeout","Promise","resolve","setTimeout"],"mappings":"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"}