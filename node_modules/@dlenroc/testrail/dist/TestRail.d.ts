import { Request, Response } from './payload';
import { TestRailException } from './TestRailException';
export * from './payload';
export type { Request as Payload, Response as Model };
declare class TestRail {
    static Exception: typeof TestRailException;
    private readonly username?;
    private readonly password?;
    private readonly baseURL;
    constructor(config?: {
        host: string;
        username: string;
        password: string;
    });
    addAttachmentToCase(caseId: number, payload: Request.AddAttachment): Promise<Response.CreatedAttachment>;
    addAttachmentToPlan(planId: number, payload: Request.AddAttachment): Promise<Response.CreatedAttachment>;
    addAttachmentToPlanEntry(planId: number, entryId: string, payload: Request.AddAttachment): Promise<Response.CreatedAttachment>;
    addAttachmentToResult(resultId: number, payload: Request.AddAttachment): Promise<Response.CreatedAttachment>;
    addAttachmentToRun(runId: number, payload: Request.AddAttachment): Promise<Response.CreatedAttachment>;
    getAttachmentsForCase(caseId: number, filters?: Request.Pagination): Promise<Response.AttachmentForCase[]>;
    getAttachmentsForPlan(planId: number, filters?: Request.Pagination): Promise<Response.AttachmentForPlan[]>;
    getAttachmentsForPlanEntry(planId: number, entryId: string): Promise<Response.AttachmentForPlanEntry[]>;
    getAttachmentsForRun(runId: number, filters?: Request.Pagination): Promise<Response.AttachmentForRun[]>;
    getAttachmentsForTest(testId: number): Promise<Response.AttachmentForTest[]>;
    getAttachment(attachmentId: string): Promise<Blob>;
    deleteAttachment(attachmentId: string): Promise<void>;
    getCase(caseId: number): Promise<Response.Case>;
    getCases(projectId: number, filters?: Request.CaseFilters): Promise<Response.Case[]>;
    getHistoryForCase(caseId: number, filters?: Request.Pagination): Promise<Response.CaseHistory[]>;
    addCase(sectionId: number, payload: Request.AddCase): Promise<Response.Case>;
    copyCasesToSection(sectionId: number, payload: Request.CopyCasesToSection): Promise<void>;
    updateCase(caseId: number, payload: Request.UpdateCase): Promise<Response.Case>;
    updateCases(suiteId: number, payload: Request.UpdateCases): Promise<void>;
    moveCasesToSection(sectionId: number, payload: Request.MoveCasesToSection): Promise<void>;
    deleteCase(caseId: number): Promise<void>;
    deleteCases(suiteId: number, payload: Request.DeleteCases): Promise<void>;
    getCaseFields(): Promise<Response.CaseField[]>;
    addCaseField(payload: Request.AddCaseField): Promise<Response.CaseField>;
    getCaseTypes(): Promise<Response.CaseType[]>;
    getConfigs(projectId: number): Promise<Response.Config[]>;
    addConfigGroup(projectId: number, payload: Request.AddConfigGroup): Promise<Response.Config>;
    addConfig(configGroupId: number, payload: Request.AddConfig): Promise<Response.ConfigItem>;
    updateConfigGroup(configGroupId: number, payload: Request.UpdateConfigGroup): Promise<Response.Config>;
    updateConfig(configId: number, payload: Request.UpdateConfig): Promise<Response.ConfigItem>;
    deleteConfigGroup(configGroupId: number): Promise<void>;
    deleteConfig(configId: number): Promise<void>;
    getMilestone(milestoneId: number): Promise<Response.Milestone>;
    getMilestones(projectId: number, filters?: Request.MilestoneFilters): Promise<Response.Milestone[]>;
    addMilestone(projectId: number, payload: Request.AddMilestone): Promise<Response.Milestone>;
    updateMilestone(milestoneId: number, payload: Request.UpdateMilestone): Promise<Response.Milestone>;
    deleteMilestone(milestoneId: number): Promise<void>;
    getPlan(planId: number): Promise<Response.Plan>;
    getPlans(projectId: number, filters?: Request.PlanFilters): Promise<Response.PlanItem[]>;
    addPlan(projectId: number, payload: Request.AddPlan): Promise<Response.Plan>;
    addPlanEntry(planId: number, payload: Request.AddPlanEntry): Promise<Response.PlanEntry>;
    addRunToPlanEntry(planId: number, entryId: string, payload: Request.AddRunToPlanEntry): Promise<Response.PlanEntry>;
    updatePlan(planId: number, payload: Request.UpdatePlan): Promise<Response.Plan>;
    updatePlanEntry(planId: number, entryId: string, payload: Request.UpdatePlanEntry): Promise<Response.PlanEntry>;
    updateRunInPlanEntry(runId: number, payload: Request.UpdateRunInPlanEntry): Promise<Response.PlanEntry>;
    closePlan(planId: number): Promise<Response.Plan>;
    deletePlan(planId: number): Promise<void>;
    deletePlanEntry(planId: number, entryId: string): Promise<void>;
    deleteRunFromPlanEntry(runId: number): Promise<void>;
    getPriorities(): Promise<Response.Priority[]>;
    getProject(projectId: number): Promise<Response.Project>;
    getProjects(filters?: Request.ProjectFilters): Promise<Response.Project[]>;
    addProject(payload: Request.AddProject): Promise<Response.Project>;
    updateProject(projectId: number, payload: Request.UpdateProject): Promise<Response.Project>;
    deleteProject(projectId: number): Promise<void>;
    getReports(projectId: number): Promise<Response.Report[]>;
    runReport(reportTemplateId: number): Promise<Response.ReportUrls>;
    getResults(testId: number, filters?: Request.ResultFilters): Promise<Response.Result[]>;
    getResultsForCase(runId: number, caseId: number, filters?: Request.ResultFilters): Promise<Response.Result[]>;
    getResultsForRun(runId: number, filters?: Request.ResultForRunFilters): Promise<Response.Result[]>;
    addResult(testId: number, payload: Request.AddResult): Promise<Response.Result>;
    addResultForCase(runId: number, caseId: number, payload: Request.AddResult): Promise<Response.Result>;
    addResults(runId: number, payload: Request.AddResults): Promise<Response.Result[]>;
    addResultsForCases(runId: number, payload: Request.AddResultsForCases): Promise<Response.Result[]>;
    getResultFields(): Promise<Response.ResultField[]>;
    getRun(runId: number): Promise<Response.Run>;
    getRuns(projectId: number, filters?: Request.RunFilters): Promise<Response.Run[]>;
    addRun(projectId: number, payload: Request.AddRun): Promise<Response.Run>;
    updateRun(runId: number, payload: Request.UpdateRun): Promise<Response.Run>;
    closeRun(runId: number): Promise<Response.Run>;
    deleteRun(runId: number): Promise<void>;
    getSection(sectionId: number): Promise<Response.Section>;
    getSections(projectId: number, filters?: Request.SectionFilters): Promise<Response.Section[]>;
    addSection(projectId: number, payload: Request.AddSection): Promise<Response.Section>;
    moveSection(sectionId: number, payload: Request.MoveSection): Promise<Response.Section>;
    updateSection(sectionId: number, payload: Request.UpdateSection): Promise<Response.Section>;
    deleteSection(sectionId: number): Promise<void>;
    getSharedStep(stepId: number): Promise<Response.SharedStep>;
    getSharedSteps(projectId: number, filters?: Request.SharedStepFilters): Promise<Response.SharedStep[]>;
    addSharedStep(projectId: number, payload: Request.AddSharedStep): Promise<Response.SharedStep>;
    updateSharedStep(stepId: number, payload: Request.UpdateSharedStep): Promise<Response.SharedStep>;
    deleteSharedStep(stepId: number, payload?: Request.DeleteSharedStep): Promise<void>;
    getStatuses(): Promise<Response.Status[]>;
    getSuite(suiteId: number): Promise<Response.Suite>;
    getSuites(projectId: number): Promise<Response.Suite[]>;
    addSuite(projectId: number, payload: Request.AddSuite): Promise<Response.Suite>;
    updateSuite(suiteId: number, payload: Request.UpdateSuite): Promise<Response.Suite>;
    deleteSuite(suiteId: number): Promise<void>;
    getTemplates(projectId: number): Promise<Response.Template[]>;
    getTest(testId: number): Promise<Response.Test>;
    getTests(runId: number, filters?: Request.TestFilters): Promise<Response.Test[]>;
    getUser(userId: number): Promise<Response.User>;
    getCurrentUser(): Promise<Response.User>;
    getUserByEmail(email: string): Promise<Response.User>;
    getUsers(filters?: Request.UserFilters): Promise<Response.User[]>;
    private _api;
}
export default TestRail; export = TestRail;
//# sourceMappingURL=TestRail.d.ts.map